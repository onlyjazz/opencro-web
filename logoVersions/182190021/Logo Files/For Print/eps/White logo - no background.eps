%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2372 730
%%HiResBoundingBox: 0 0 2371.9199 729.12
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2371.9199 729.12 re
W
q
[0.24 0 0 -0.24 0 729.12] cm
q
0 0 9883.333 3035.0146 re
W*
q
[28.797541 0 0 28.799887 80.635796 -27347.283] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
13.540789 1013.16803 m
9.379528 1013.16803 5.999922 1016.56024 5.999922 1020.7373 c
5.999922 1024.91443 9.379528 1028.34229 13.540789 1028.34229 c
14.354332 1028.34229 15.154764 1028.20618 15.924017 1027.94946 c
28.20512 1046.84912 52.57386 1051.21021 70.417244 1040.98145 c
70.938461 1040.68237 71.141853 1039.93396 70.843857 1039.4104 c
70.545868 1038.88696 69.800354 1038.68286 69.278778 1038.98206 c
52.505825 1048.59741 29.607559 1044.61121 17.951496 1026.8783 c
19.845747 1025.49707 21.081654 1023.25879 21.081654 1020.73718 c
21.081654 1016.56006 17.702402 1013.16791 13.540788 1013.16791 c
13.540789 1013.16803 l
h
f*
70.417244 970.573 m
69.466225 970.69434 69.179924 972.26324 70.026062 972.71527 c
83.455902 980.93427 90.954605 997.01709 87.668541 1013.27515 c
87.275589 1013.20813 86.866692 1013.16815 86.459213 1013.16815 c
82.297951 1013.16815 78.91835 1016.56036 78.91835 1020.73737 c
78.91835 1024.91443 82.297958 1028.34241 86.459213 1028.34241 c
90.620476 1028.34241 94.000076 1024.91455 94.000076 1020.73743 c
94.000076 1017.78583 92.31311 1015.22742 89.838463 1013.98944 c
93.445908 996.69836 85.507126 979.50757 71.199959 970.75171 c
71.01004 970.63049 70.783974 970.5675 70.559326 970.57318 c
70.51149 970.57019 70.465073 970.57019 70.417236 970.57318 c
70.417244 970.573 l
h
f*
50 958.36218 m
45.98756 958.36218 42.72559 961.53204 42.494923 965.50299 c
25.297836 968.69659 12.767286 982.35565 9.912796 998.565 c
9.896421 998.64032 9.887722 998.71649 9.886697 998.79352 c
9.885672 998.87054 9.892342 998.9469 9.906709 999.02258 c
9.921076 999.09827 9.942846 999.17175 9.972022 999.24304 c
10.001198 999.31427 10.037187 999.3819 10.079989 999.44592 c
10.12279 999.50983 10.171539 999.56885 10.226235 999.62299 c
10.280932 999.67706 10.340466 999.7251 10.404839 999.76709 c
10.469213 999.80902 10.537121 999.84412 10.608564 999.87231 c
10.680008 999.90045 10.753539 999.9212 10.829157 999.93445 c
10.904776 999.94769 10.98095 999.95325 11.057681 999.95099 c
11.134412 999.94879 11.210144 999.9389 11.284879 999.92126 c
11.359613 999.90369 11.431837 999.87878 11.501548 999.8465 c
11.571258 999.81421 11.637045 999.77527 11.698909 999.72968 c
11.760772 999.68402 11.817458 999.63263 11.868967 999.57556 c
11.920476 999.51837 11.965764 999.45667 12.004833 999.39032 c
12.043902 999.32404 12.07596 999.25446 12.101005 999.18158 c
12.126051 999.10876 12.143577 999.03412 12.153584 998.95776 c
14.834805 983.73291 26.541889 970.8869 42.67244 967.78809 c
43.499092 971.07349 46.475117 973.50073 50 973.50073 c
54.161259 973.50073 57.540867 970.10852 57.540867 965.93146 c
57.540867 961.75439 54.161259 958.36218 50 958.36218 c
h
f*
Q
q
[67.441666 0 0 67.447159 3233.7473 242.40524] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
8.16 5.8 m
12.06 5.8 15.42 8.74 15.42 13 c
15.42 17.26 12.06 20.200001 8.16 20.200001 c
4.26 20.200001 0.9 17.26 0.9 13.000001 c
0.9 8.740002 4.26 5.800001 8.16 5.800001 c
8.16 5.8 l
h
8.16 17.459999 m
10.520001 17.459999 12.379999 15.599999 12.379999 12.999999 c
12.379999 10.399999 10.52 8.539999 8.16 8.539999 c
5.8 8.539999 3.94 10.399999 3.94 12.999999 c
3.94 15.599999 5.8 17.459999 8.16 17.459999 c
h
23.1 9.42 m
25.48 9.42 28.24 11.2 28.24 14.780001 c
28.24 18.480001 25.48 20.200001 23.1 20.200001 c
21.300001 20.200001 20.280001 19.140001 20.220001 18.720001 c
20.220001 23.800001 l
17.360001 23.800001 l
17.360001 17.68 l
17.360001 9.6 l
20.220001 9.6 l
20.220001 10.76 l
20.280001 10.54 21.300001 9.42 23.100002 9.42 c
23.1 9.42 l
h
22.700001 17.66 m
24.140001 17.66 25.460001 16.68 25.460001 14.78 c
25.460001 12.94 24.140001 11.96 22.700001 11.96 c
21.300001 11.96 20.080002 12.92 20.080002 14.78 c
20.080002 16.700001 21.300001 17.66 22.700001 17.66 c
h
35.099998 9.42 m
37.459999 9.42 40.719997 11.2 40.099998 15.8 c
32.539997 15.8 l
32.899998 17.1 33.979996 17.780001 35.379997 17.780001 c
36.679996 17.780001 37.179996 17.480001 37.919998 17.08 c
39.5 18.619999 l
38.599998 19.559999 37.32 20.199999 35.279999 20.199999 c
32.68 20.199999 29.639999 18.419998 29.639999 14.839998 c
29.639999 11.199998 32.739998 9.419998 35.099998 9.419998 c
35.099998 9.42 l
h
35.099998 11.86 m
34.059998 11.86 32.959999 12.5 32.579998 13.78 c
37.579998 13.78 l
37.259998 12.5 36.119999 11.86 35.099998 11.86 c
h
48.099998 9.44 m
50.079998 9.44 52.039997 10.74 52.039997 14.02 c
52.039997 20 l
49.179996 20 l
49.179996 14.22 l
49.179996 12.520001 48.519997 11.940001 47.419998 11.940001 c
45.899998 11.940001 45 13.380001 44.779999 14.1 c
44.779999 20 l
41.919998 20 l
41.919998 9.6 l
44.779999 9.6 l
44.779999 11.520001 l
44.98 10.980001 46.099998 9.440001 48.099998 9.440001 c
48.099998 9.44 l
h
65.900002 18.5 m
64.660004 19.620001 63 20.200001 61.139999 20.200001 c
57.220001 20.200001 53.84 17.26 53.84 13.000001 c
53.84 8.740002 57.220001 5.800001 61.139999 5.800001 c
62.98 5.800001 64.620003 6.400001 65.82 7.460001 c
64.059998 9.440001 l
63.319996 8.92 62.319996 8.540001 61.299999 8.540001 c
58.779999 8.540001 56.879997 10.400001 56.879997 13.000001 c
56.879997 15.600001 58.779999 17.460001 61.299995 17.460001 c
62.359997 17.460001 63.399994 17.060001 64.159996 16.460001 c
65.900002 18.5 l
h
78.82 20 m
75.720001 20 l
72.739998 15.34 l
72.699997 15.34 l
70.719994 15.34 l
70.719994 20 l
67.799995 20 l
67.799995 6 l
72.699997 6 l
75.839996 6 77.879997 7.9 77.879997 10.76 c
77.879997 12.66 76.959999 14.08 75.399994 14.8 c
78.82 20 l
h
70.720001 8.68 m
70.720001 12.82 l
72.520004 12.82 l
73.960007 12.82 74.960007 12.259999 74.960007 10.76 c
74.960007 9.280001 73.960007 8.68 72.520004 8.68 c
70.720001 8.68 l
h
87.580002 5.8 m
91.480003 5.8 94.840004 8.74 94.840004 13 c
94.840004 17.26 91.480003 20.200001 87.580002 20.200001 c
83.68 20.200001 80.32 17.26 80.32 13.000001 c
80.32 8.740002 83.68 5.800001 87.580002 5.800001 c
87.580002 5.8 l
h
87.580002 17.459999 m
89.940002 17.459999 91.800003 15.599999 91.800003 12.999999 c
91.800003 10.399999 89.940002 8.539999 87.580002 8.539999 c
85.220001 8.539999 83.360001 10.399999 83.360001 12.999999 c
83.360001 15.599999 85.220001 17.459999 87.580002 17.459999 c
h
f
Q
q
[21.434755 0 0 21.436502 3289.3003 1986.0757] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
11.24 5.84 m
11.24 7.04 l
6.4 7.04 l
6.4 20 l
5.079999 20 l
5.079999 7.04 l
0.239999 7.04 l
0.239999 5.84 l
11.24 5.84 l
h
28.964001 5.84 m
28.964001 12.08 l
36.884003 12.08 l
36.884003 5.84 l
38.204002 5.84 l
38.204002 20 l
36.884003 20 l
36.884003 13.280001 l
28.964003 13.280001 l
28.964003 20 l
27.644003 20 l
27.644003 5.84 l
28.964003 5.84 l
28.964001 5.84 l
h
64.968002 5.84 m
64.968002 7.04 l
57.628002 7.04 l
57.628002 12.08 l
64.508003 12.08 l
64.508003 13.28 l
57.628002 13.28 l
57.628002 18.799999 l
65.288002 18.799999 l
65.288002 20 l
56.308002 20 l
56.308002 5.84 l
64.968002 5.84 l
h
103.475998 15.04 m
109.975998 15.04 l
106.776001 7.28 l
103.475998 15.04 l
h
107.515999 5.84 m
113.475998 20 l
111.995995 20 l
110.455994 16.24 l
102.955994 16.24 l
101.355995 20 l
99.975998 20 l
106.155998 5.84 l
107.515999 5.84 l
h
131.059998 5.84 m
131.059998 20 l
129.73999 20 l
129.73999 5.84 l
131.059998 5.84 l
h
174.98801 5.48 m
177.08134 5.48 178.70801 6.22 179.86801 7.7 c
178.78801 8.599999 l
178.388 8 177.85468 7.529999 177.188 7.19 c
176.52133 6.85 175.78801 6.68 174.98801 6.679999 c
173.22801 6.679999 171.79468 7.259999 170.688 8.419999 c
169.58133 9.579999 169.01466 11.079999 168.98801 12.919999 c
168.98801 14.746666 169.54468 16.236666 170.658 17.389999 c
171.77133 18.543333 173.21468 19.133333 174.98801 19.16 c
175.748 19.16 176.52135 18.969999 177.30801 18.59 c
178.09468 18.210001 178.71469 17.666668 179.16801 16.960001 c
180.24802 17.780001 l
178.99467 19.5 177.24135 20.360001 174.98802 20.360001 c
172.80136 20.346666 171.04469 19.640001 169.71802 18.240002 c
168.39134 16.840002 167.708008 15.06667 167.668015 12.920002 c
167.668015 10.746668 168.35135 8.970002 169.71802 7.590002 c
171.08469 6.210002 172.84135 5.506669 174.98802 5.480002 c
174.98801 5.48 l
h
201.112 12.08 m
202.13866 12.08 202.93199 11.849999 203.492 11.389999 c
204.05202 10.929999 204.33202 10.319999 204.332 9.56 c
204.33199 8.8 204.05865 8.193334 203.51199 7.74 c
202.96533 7.286666 202.15199 7.053333 201.07199 7.04 c
198.21199 7.04 l
198.21199 12.08 l
201.11198 12.08 l
201.112 12.08 l
h
200.71201 5.84 m
203.97867 5.84 205.62534 7.08 205.65201 9.56 c
205.65201 11.653334 204.44534 12.866668 202.03201 13.200001 c
206.15201 20 l
204.65201 20 l
200.67201 13.280001 l
198.21201 13.280001 l
198.21201 20 l
196.892 20 l
196.892 5.84 l
200.71201 5.84 l
h
223.37601 12.92 m
223.37601 14.72 223.92934 16.203333 225.03601 17.369999 c
226.14268 18.536665 227.58934 19.133333 229.37601 19.16 c
231.17601 19.16 232.62267 18.57 233.716 17.389999 c
234.80934 16.209999 235.36267 14.719999 235.37601 12.919999 c
235.37601 11.093332 234.82935 9.603333 233.73601 8.449999 c
232.64267 7.296665 231.18268 6.706665 229.356 6.679999 c
227.56934 6.679999 226.12933 7.266666 225.036 8.439999 c
223.94266 9.613332 223.38931 11.106666 223.37599 12.919998 c
223.37601 12.92 l
h
229.37601 5.48 m
230.81601 5.48 232.08934 5.796667 233.19601 6.43 c
234.30269 7.063334 235.15935 7.95 235.76602 9.09 c
236.3727 10.23 236.68269 11.506666 236.69601 12.92 c
236.69601 15.093334 236.00935 16.870001 234.63602 18.25 c
233.26268 19.629999 231.50935 20.333334 229.37602 20.360001 c
227.22935 20.360001 225.48268 19.663334 224.13602 18.27 c
222.78935 16.876667 222.09601 15.093334 222.05602 12.92 c
222.06935 10.746666 222.74934 8.973333 224.09601 7.6 c
225.44267 6.226667 227.20267 5.52 229.37601 5.48 c
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
